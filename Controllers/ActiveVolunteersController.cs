using Microsoft.AspNetCore.Mvc;
using Supabase;
using Supabase_Minimal_API.Models;

[ApiController]
[Route("[controller]")]
public class ActiveVolunteersController : ControllerBase
{
    // Create - Handles POST requests to add new records
    [HttpPost("{id}")]
    public async Task<IActionResult> OnPostAsync(
        [FromBody] CreateActiveVolunteersRequest request, // JSON from request body → C# object
        [FromServices] Client client) // Supabase client injected by framework
    {
        // Transform the request data into a database model
        // Map fields from the CreateRequest to the full ActiveVolunteersModel
        var activeVolunteers = new ActiveVolunteersModel
        {
            FirstName = request.FirstName,
            LastName = request.LastName,
            Phone = request.Phone,
            RfidTag = request.RfidTag,
            VolunteerStartDate = request.VolunteerStartDate,
            VolunteerNotes = request.VolunteerNotes
        }; // Note: ID will be auto-generated by the database

        // Send INSERT command to Supabase database
        // Database creates the record and auto-generates an ID
        // Returns the complete newly created record (including the new ID)
        var response = await client.From<ActiveVolunteersModel>().Insert(activeVolunteers);
        
        // Extract the newly created record from Supabase's response
        // This contains all fields including the auto-generated ID
        var newActiveVolunteers = response.Models.First();
        
        // Return just the ID to confirm successful creation
        // Client can use this ID for future operations (GET, PUT, DELETE)
        return Ok(newActiveVolunteers.Id);
    }

    // Read - Handles GET requests to retrieve a specific record
    [HttpGet("{id}")]
    public async Task<IActionResult> OnGetAsync(
        Guid id, // ID from URL path (e.g., /ActiveVolunteers/123-456-789)
        [FromServices] Client client) // Supabase client injected by framework
    {
        // Send SELECT query to Supabase database
        // Find the record WHERE Id matches the provided ID
        // .Get() executes the query and returns matching records
        var response = await client.From<ActiveVolunteersModel>().Where(i => i.Id == id).Get();
        
        // Extract the record from the response (if it exists)
        // FirstOrDefault() returns null if no record found - safe for "might not exist"
        var activeVolunteers = response.Models.FirstOrDefault();

        // Check if a record was actually found
        if (activeVolunteers == null) 
            return NotFound(); // Return 404 - record doesn't exist
            
        // Return the found record with 200 OK status
        return Ok(activeVolunteers);
    }

    // Update - Handles PUT requests to modify existing records
    [HttpPut("{id}")]
    public async Task<IActionResult> OnPutAsync(
        Guid id, // ID from URL path (e.g., /ActiveVolunteers/123-456-789)
        [FromBody] ActiveVolunteersModel updateData, // JSON from request body → C# object
        [FromServices] Client client) // Supabase client injected by framework
    {
        // Ensure the data has the correct ID (matches URL parameter)
        updateData.Id = id;
        
        // Send UPDATE command to Supabase database
        // 1. Find record WHERE Id matches the provided ID
        // 2. Replace that record's data with updateData
        // 3. Return the updated record in the response
        var response = await client.From<ActiveVolunteersModel>()
            .Where(i => i.Id == id).Update(updateData);

        // Check if database actually found and updated a record
        // Count == 0 means no record with that ID existed
        if (response.Models.Count == 0)
            return NotFound(); // Return 404 - record doesn't exist

        // Extract the actual updated record from Supabase's response
        // This contains the real data now stored in the database
        var updatedRecord = response.Models.First();
        return Ok(updatedRecord); // Return 200 with the updated record
    }
 
    // Delete - Handles DELETE requests to remove existing records
    [HttpDelete("{id}")]
    public async Task<IActionResult> OnDeleteAsync(
        Guid id, // ID from URL path (e.g., DELETE /ActiveVolunteers/123)
        [FromServices] Client client) // Supabase client injected by framework
    {
        // Send DELETE command to Supabase database
        // Find the record WHERE Id matches the provided ID and remove it
        // Note: This doesn't check if the record exists before deleting
        await client.From<ActiveVolunteersModel>()
            .Where(i => i.Id == id).Delete();

        // Return 204 No Content - standard for successful DELETE operations
        // 204 means "operation succeeded but no content to return"
        // Client knows deletion worked because they got 204 (not 404 or 500)
        return NoContent();
    }

}